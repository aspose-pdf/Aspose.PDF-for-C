/// @file system/delegate.h
/// Contains the definition of System::Delegate class.
#ifndef _aspose_system_function_h_
#define _aspose_system_function_h_

#include "shared_ptr.h"
#include "weak_ptr.h"
#include "exceptions.h"
#include <utility>
#include <memory>
#include <functional>

namespace System
{
    template<class Unused>
    class Delegate;

    /// Represents a pointer to a function, method or a function object.
    /// This type should be allocated on stack and passed to functions by value or by reference.
    /// Never use System::SmartPtr class to manage objects of this type.
    /// @tparam ReturnType The return type of a function, method or a function object pointer to which is represented by the class
    /// @tparam ArgumentTypes The argument list of a function, method or a function object pointer to which is represented by the class
    template <class ReturnType, class... ArgumentTypes>
    class Delegate <ReturnType(ArgumentTypes...)>
    {

    public:
        /// Default constructor. Constructs the delegate object that does not point to anything.
        Delegate() = default;

        // noncopyable
        Delegate(const Delegate&) = delete;
        Delegate& operator=(const Delegate&) = delete;

        // movable
        /// Moving copy constructor. Takes the ownership of an entity pointed to by the specified delegate.
        /// @param o The Delegate object to move the pointed to entity from
        Delegate(Delegate&& o) : m_invoker(std::move(o.m_invoker)) {}

        /// Moving assignment operator. Takes the ownership of an entity pointed to by the specified delegate.
        /// @param o The Delegate object to move the pointed to entity from
        /// @returns A reference to the self
        Delegate& operator=(Delegate&& o) { m_invoker = std::move(o.m_invoker); }

        /// Constructor. Constructs a delegate object from the specified pointer to free function or static method.
        /// @param function Pointer to a function or a static method that will be pointed to by the newly created Delegate instance 
        /// @tparam The type of the function or static method pointer accepted by the constructor as an argument
        template<class T>
        Delegate(T function, typename std::enable_if<!std::is_bind_expression<T>::value>::type * = 0)
            : m_invoker( new FunctionInvoker<T>(std::move(function)) )
        {
        }

        /// Constructor. Constructs a delegate from the specified pointer to the function object generated by std::bind().
        /// @param function Pointer to a "bind expression" - a function pointer generated by std::bind() - that will be pointed to by the newly created Delegate instance
        /// @tparam The type of the function object generated by std::bind() accepted by the constructor as an argument
        template<class T>
        Delegate(T function, typename std::enable_if<std::is_bind_expression<T>::value>::type * = 0)
            : m_invoker( new BindInvoker<T>(function) )
        {
        }

        /// Constructor. Constructs a delegate from the specified function object.
        /// @param functor_tag A dummy integer value; this argument is used to resolve ambiguity 
        /// @param functor A function object that the newly constructed delegate will point to
        /// @tparam T The type of the function object accepted by the constructor as an argument
        template<class T>
        Delegate(int functor_tag, T& functor)
            : m_invoker( new FunctorInvoker<T>(functor) )
        {
        }

        /// Moving constructor. Constructs a delegate from the specified function object.
        /// @param functor_tag A dummy integer value; this argument is used to resolve ambiguity 
        /// @param functor A function object that the newly constructed delegate will point to
        /// @tparam T The type of the function object accepted by the constructor as an argument
        template<class T>
        Delegate(long functor_tag, T&& functor)
            : m_invoker( new BindInvoker<T>(std::move(functor)) )
        {
        }

        // member function
        /// Constructor. Constructs a delegate that points to the specified non-static method of the specified object.
        /// @param member A pointer to the non-static method that the newly created delegate will point to
        /// @param obj A pointer to an object member method of which will be pointed to by the newly created delegate
        /// @tparam MemberType The type of the non-static method that the constructor accepts as an argument
        /// @tparam ClassType The type of the object accepted by the constructor as an argument
        template <class MemberType, class ClassType>
        Delegate(MemberType ClassType::* member, ClassType* obj)
            : m_invoker( new ClassMemberInvoker<MemberType, ClassType>(member, obj) )
        {
        }

        /// Constructor. Constructs a delegate that points to the specified non-static method of the specified object.
        /// @param member A pointer to the non-static method that the newly created delegate will point to
        /// @param obj A shard pointer to an object member method of which will be pointed to by the newly created delegate
        /// @tparam MemberType The type of the non-static method that the constructor accepts as an argument
        /// @tparam ClassType The type of the object accepted by the constructor as an argument
        template <class MemberType, class ClassType>
        Delegate(MemberType ClassType::* member, const SharedPtr<ClassType>& obj)
            : m_invoker(new ClassMemberInvoker<MemberType, ClassType>(member, obj))
        {
        }

        /// Constructs a delegate object that points to an std::function function object.
        /// @param f A function object to be pointed to by the newly created delegate object
        /// @tparam R The return type of the function object accepted by the constructor as an argument
        /// @tparam Args The argument list of the function object accepted by the constructor as an argument
        template <class R, class... Args>
        Delegate(std::function<R(Args...)> f)
            : m_invoker( new StdFunctionInvoker<std::function<R(Args...)>>(f) )
        {
        }

        /// Invokes a function, method or a function object that is pointed to by current delegate object.
        /// @param args Arguments to pass to the invoked entity
        /// @returns The value returned by invoked entity
        ReturnType operator()(ArgumentTypes... args)
        {
            return m_invoker->invoke(args...);
        }

        /// Compares two delegate objects to check if they point to the same entity.
        /// @param f A delegate object to compare current delegate object with
        /// @returns True if both delegates point the same entity, otherwise - false
        bool operator==(const Delegate& f) const
        {
            if( m_invoker == f.m_invoker )
                return true; // handles both null case and self test

            if( !m_invoker || !f.m_invoker )
                return false;

            return m_invoker->compare( *f.m_invoker.get());
        }

        /// Determines if the current delegate object is empty, e.g. does not point to any entity.
        /// @returns True if current delegate object does not point to a function, a method of a function object, otherwise - false.
        bool Empty() { return m_invoker->is_empty(); }

    private:

        /// A base class for a family of classes that handle invocation of different invokable entities.
        /// Defines common interface, implements basic methods and keeps the pointer to the entity invokable entity.
        struct BaseInvoker
        {
            /// Default constructor.
            BaseInvoker(){}

            /// Destructor.
            virtual ~BaseInvoker() {}

            BaseInvoker(const BaseInvoker&) = delete;
            BaseInvoker& operator=(const BaseInvoker&) = delete;

            /// Invokes corresponding entity passing the specified argument list to it and returns the value returned by the entity.
            /// @param args The arguments to be passed to the invoked entity
            /// @returns A value returned by the invoked entity.
            virtual ReturnType invoke(ArgumentTypes... args) = 0;

            /// Determines if current and the specified objects point to the same invokable entity.
            /// @param other Object to compare current object with
            /// @returns True if current object and the specified object both point to the same invokable entity, otherwise - false
            bool compare(const BaseInvoker& other)
            {
                if( fast_compare_object() != other.fast_compare_object() )
                    return false;

                return deep_compare(other);
            }

            /// Returns a number that uniquely identifies current instance.
            /// @returns A number that uniquely identifies corrent instance.
            size_t hash() const
            {
                return static_cast<size_t>(fast_compare_object());
            }

            /// Performs deep comparison of the current and the specified objects.
            /// @param other The object to compare with current object
            /// @returns True if both objects point to the same invokable entity, otherwise - false
            virtual bool deep_compare(const BaseInvoker& other) const = 0;

            /// Returns a pointer value that represents the address that uniquely identifies the invokable entity pointed to be the current instance, though
            /// may not be address of the invokable entity itself. This value is intended to be used for comparison with similar values and not for 
            /// object access.
            virtual const void * fast_compare_object() const = 0;

            /// Determines whether the current instance is empty - does not point to any invokable entity.
            /// @return True if the current instance does not point to any invokable entity, otherwise - false
            virtual bool is_empty() const = 0;

        };

        /// Handles invocation of a free function or a static methods.
        /// This type should be allocated on stack and passed to functions by value or by reference.
        /// Never use System::SmartPtr class to manage objects of this type.
        /// @tparam T The type of the free function of static member invocation of which the current class handles.
        template<class T>
        struct FunctionInvoker : public BaseInvoker
        {
            /// Constructs an instance and stores a pointer to a function or a static member to be invoked.
            /// @param function Pointer to a free function or a static member to be invoked. 
            FunctionInvoker(T function) : m_function(std::move(function))
            {
                static_assert(!std::is_bind_expression<T>::value, "Bind");
                static_assert(std::is_pointer<T>::value, "Only functions and static member functions is supported, not all callable objects (functors).");
            }

            /// Invokes corresponding entity passing the specified argument list to it and returns the value returned by the entity.
            /// @param args The arguments to be passed to the invoked entity
            /// @returns A value returned by the invoked entity.
            ReturnType invoke(ArgumentTypes... args) override
            {
                return m_function(args...);
            }
        protected:
            /// Returns a pointer value that represents the address that uniquely identifies the invokable entity pointed to be the current object, though
            /// may not be the address of the invokable entity itself. This value is intended to be used for comparison with similar values and not for 
            /// object access.
            const void * fast_compare_object() const override
            {
                return reinterpret_cast<const void *>(m_function);
            }

            /// Performs deep comparison of the current and the specified objects.
            /// @param other The object to compare with current object
            /// @returns True if both objects point to the same invokable entity, otherwise - false
            bool deep_compare(const BaseInvoker& other) const override
            {
                auto obj = dynamic_cast<const FunctionInvoker<T>*>(&other);
                if( obj )
                    return m_function == obj->m_function;

                return false;
            }

            /// Determines whether the current object is empty - does not point to any invokable entity.
            /// @return True if the current object does not point to any invokable entity, otherwise - false
            bool is_empty() const override { return false; }

        private:
            /// Invokable entity.
            T m_function;
        };

        /// Handles invocation of a function object returned by std::bind().
        /// This type should be allocated on stack and passed to functions by value or by reference.
        /// Never use System::SmartPtr class to manage objects of this type.
        /// @tparam T The type of the function object invocation of which the current class handles.
        template<class T>
        struct BindInvoker : public BaseInvoker
        {
            /// Constructs an instance and stores a function object to be invoked.
            /// @param function Function object to be invoked. 
            BindInvoker(T function) : m_function(std::move(function))
            {
            }

            /// Invokes stored function object passing the specified argument list to it and returns the value returned by the function object.
            /// @param args The arguments to be passed to the function object being invoked
            /// @returns A value returned by the invoked function object
            ReturnType invoke(ArgumentTypes... args) override
            {
                return m_function(args...);
            }
        protected:
            /// Returns a pointer value that represents the address that uniquely identifies the function object stored by the current object, though
            /// may not be the address of the function object itself. This value is intended to be used for comparison with similar values and not for 
            /// object access.
            const void * fast_compare_object() const override
            {
                return reinterpret_cast<const void *>(&m_function);
            }

            /// Performs deep comparison of the current and the specified objects.
            /// @param other The object to compare with current object
            /// @returns True if both objects represent the same functional object, otherwise - false
            bool deep_compare(const BaseInvoker& other) const override
            {
                auto obj = dynamic_cast<const BindInvoker<T>*>(&other);
                if( obj )
                    return &m_function == &obj->m_function;

                return false;
            }

            /// Determines whether the current object is empty - does not point to any invokable entity.
            /// @return True if the current object does not point to any invokable entity, otherwise - false
            bool is_empty() const override { return false; }

        private:
            /// Function object ot be invoked.
            T m_function;
        };

        /// Handles invocation of a function object.
        /// This type should be allocated on stack and passed to functions by value or by reference.
        /// Never use System::SmartPtr class to manage objects of this type.
        /// @tparam T The type of the function object invocation of which the current class handles.
        template<class T>
        struct FunctorInvoker : public BaseInvoker
        {
            /// Constructs an instance and stores a function object to be invoked.
            /// @param function Function object to be invoked. 
            FunctorInvoker(T& functor) : m_functor(functor)
            {
            }

            /// Invokes stored function object passing the specified argument list to it and returns the value returned by the function object.
            /// @param args The arguments to be passed to the function object being invoked
            /// @returns A value returned by the invoked function object
            ReturnType invoke(ArgumentTypes... args) override
            {
                return m_functor(args...);
            }
        protected:
            /// Returns a pointer value that represents the address that uniquely identifies the function object stored by the current object, though
            /// may not be the address of the function object itself. This value is intended to be used for comparison with similar values and not for 
            /// object access.
            const void * fast_compare_object() const override
            {
                return reinterpret_cast<const void *>(&m_functor);
            }

            /// Performs deep comparison of the current and the specified objects.
            /// @param other The object to compare with current object
            /// @returns True if both objects represent the same functional object, otherwise - false
            bool deep_compare(const BaseInvoker& other) const override
            {
                auto obj = dynamic_cast<const FunctorInvoker<T>*>(&other);
                if( obj )
                    return &m_functor == &obj->m_functor;

                return false;
            }

            /// Determines whether the current object is empty - does not point to any invokable entity.
            /// @return True if the current object does not point to any invokable entity, otherwise - false
            bool is_empty() const override { return false; }

        private:
            /// Function object ot be invoked.
            T& m_functor;
        };

        /// Handles invocation of a std::function<> function object.
        /// This type should be allocated on stack and passed to functions by value or by reference.
        /// Never use System::SmartPtr class to manage objects of this type.
        /// @tparam T The type of the function object invocation of which the current class handles.
        template<class T>
        struct StdFunctionInvoker : public BaseInvoker
        {
            /// Constructs an instance and stores a function object to be invoked.
            /// @param function Function object to be invoked. 
            StdFunctionInvoker(T function) : m_function(function)
            {
            }

            /// Invokes stored function object passing the specified argument list to it and returns the value returned by the function object.
            /// @param args The arguments to be passed to the function object being invoked
            /// @returns A value returned by the invoked function object
            ReturnType invoke(ArgumentTypes... args) override
            {
                return m_function(args...);
            }
        protected:
            /// Returns a pointer value that represents the address that uniquely identifies the function object stored by the current object, though
            /// may not be the address of the function object itself. This value is intended to be used for comparison with similar values and not for 
            /// object access.
            const void * fast_compare_object() const override
            {
                auto ptr = m_function.template target<ReturnType(*)(ArgumentTypes...)>();
                return ptr;
            }

            /// Performs deep comparison of the current and the specified objects.
            /// @param other The object to compare with current object
            /// @returns True if both objects represent the same functional object, otherwise - false
            bool deep_compare(const BaseInvoker& other) const override
            {
                return fast_compare_object() == other.fast_compare_object();
            }

            /// Determines whether the current object is empty - does not point to any invokable entity.
            /// @return True if the current object does not point to any invokable entity, otherwise - false
            bool is_empty() const override { return false; }

        private:
            /// Function object ot be invoked.
            T m_function;
        };

        /// Handles invocation of a non-static member method.
        /// This type should be allocated on stack and passed to functions by value or by reference.
        /// Never use System::SmartPtr class to manage objects of this type.
        /// @tparam MemberType The type of the non-static method invocation of which the currente class handles.
        /// @tparam ClassType The type of the class where the non-static method is defined
        template<class MemberType, class ClassType>
        struct ClassMemberInvoker : public BaseInvoker
        {
            /// The type of the pointer to non-static method invocation of which is handled by the current class.
            using ClassFunction = MemberType ClassType::*;

            /// Constructs an instance and stores a pointer to the object and its method to be invoked.
            /// @param function Pointer to the non-static method to be invoked. 
            /// @param obj Shared pointer to the object in the context of which the method is to be invoked.
            ClassMemberInvoker(ClassFunction member, const SharedPtr<ClassType>& obj)
                : m_member_function(member), m_obj(obj)
            {}

            /// Constructs an instance and stores a pointer to the object and its method to be invoked.
            /// @param function Pointer to the non-static method to be invoked. 
            /// @param obj A pointer to the object in the context of which the method is to be invoked.
            ClassMemberInvoker(ClassFunction member, ClassType* obj)
                : m_member_function(member), m_obj(obj)
            {}

            /// Invokes non-static method of the stored object passing the specified argument list to it and returns the value returned by the method.
            /// @param args The arguments to be passed to the method being invoked
            /// @returns A value returned by the invoked method
            ReturnType invoke(ArgumentTypes... args) override
            {
                auto * ptr = m_obj.get_weak();
                if (ptr != nullptr)
                {
                    return (detail::cast_statically_or_dynamically<Object, ClassType>::cast(ptr)->*m_member_function)(args...);
                }

                throw NullReferenceException(u"Delegate: Object reference not set to an instance of an object.");
            }

            /// Determines whether the current object is empty - does not point to any invokable entity.
            /// @return True if the current object does not point to any invokable entity, otherwise - false
            bool is_empty() const override { return m_obj == nullptr; }

        protected:
            /// Returns a pointer value that represents the address that uniquely identifies the object and its method stored by the current object, though
            /// may not be the address of the object or the method itself. This value is intended to be used for comparison with similar values and not for 
            /// object or member access.
            const void * fast_compare_object() const override
            {
                return m_obj.get_weak();
            }

            /// Performs deep comparison of the current and the specified objects.
            /// @param other The object to compare with current object
            /// @returns True if both Invoker objects represent the same non-static method of the same object, otherwise - false
            bool deep_compare(const BaseInvoker& other) const override
            {
                typedef ClassMemberInvoker<MemberType, ClassType> ThisType;
                auto obj = dynamic_cast<const ThisType*>(&other);
                if (obj)
                    return m_member_function == obj->m_member_function && (m_obj == obj->m_obj);

                return false;
            }

        private:
            /// The pointer to the non-static method to be invoked.
            ClassFunction m_member_function;

            /// The pointer to the object non-static method of which is to be invoked.
            WeakPtr<ClassType> m_obj;
        };

        /// The pointer to the object that handles invocation of the invokable entity pointed to by the current delegate object.
        std::unique_ptr<BaseInvoker> m_invoker;
    };

} // namespace System
#endif // _aspose_system_function_h_
